name: Build iStoreOS for RK3568 with QWRT 5G

on:
  push:
    branches: [ main ]
    paths:
      - '.config'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libncursesw5-dev libssl-dev libelf-dev python3-distutils rsync unzip zlib1g-dev file wget libusb-1.0-0-dev

      - name: Clone iStoreOS source
        run: |
          git clone https://github.com/istoreos/istoreos.git --depth=1 --branch=main istoreos-src
          cd istoreos-src

      - name: 清除所有默认feeds配置（避免自动添加网络源）
        run: |
          cd istoreos-src
          # 直接清空feeds配置文件，只保留必要的基础源
          > feeds.conf.default
          echo "src-git base https://github.com/openwrt/openwrt.git;openwrt-22.03" >> feeds.conf.default
          echo "src-git packages https://github.com/openwrt/packages.git;openwrt-22.03" >> feeds.conf.default
          echo "src-git luci https://github.com/openwrt/luci.git;openwrt-22.03" >> feeds.conf.default

      - name: 本地部署QWRT和Quectel包（完全脱离feeds网络依赖）
        run: |
          cd istoreos-src
          # 创建本地包目录（直接放在package目录下，OpenWRT会自动识别）
          mkdir -p package/qwrt package/quectel
          
          # 下载QWRT包并解压到package/qwrt
          wget -t 3 -O qwrt.zip https://github.com/qwrt-project/qwrt-packages/archive/refs/heads/main.zip
          unzip -q qwrt.zip
          mv qwrt-packages-main/* package/qwrt/
          rm -rf qwrt-packages-main qwrt.zip
          
          # 下载Quectel包并解压到package/quectel
          wget -t 3 -O quectel.zip https://github.com/quectel/quectel-openwrt/archive/refs/heads/master.zip
          unzip -q quectel.zip
          mv quectel-openwrt-master/* package/quectel/
          rm -rf quectel-openwrt-master quectel.zip
          
          # 验证本地包是否部署成功
          echo "QWRT本地包内容："
          ls -la package/qwrt
          echo "Quectel本地包内容："
          ls -la package/quectel

      - name: 强制添加5G模组配置
        run: |
          cp ./.config istoreos-src/.config
          cd istoreos-src
          # 确保必要组件配置
          sed -i '/CONFIG_PACKAGE_kmod-usb-serial/d' .config && echo "CONFIG_PACKAGE_kmod-usb-serial=y" >> .config
          sed -i '/CONFIG_PACKAGE_kmod-usb-serial-qcserial/d' .config && echo "CONFIG_PACKAGE_kmod-usb-serial-qcserial=y" >> .config
          sed -i '/CONFIG_PACKAGE_kmod-qmi-wwan/d' .config && echo "CONFIG_PACKAGE_kmod-qmi-wwan=y" >> .config
          sed -i '/CONFIG_PACKAGE_kmod-usb-net-qmi-wwan/d' .config && echo "CONFIG_PACKAGE_kmod-usb-net-qmi-wwan=y" >> .config
          sed -i '/CONFIG_PACKAGE_modemmanager/d' .config && echo "CONFIG_PACKAGE_modemmanager=y" >> .config
          sed -i '/CONFIG_PACKAGE_modemmanager-ppp/d' .config && echo "CONFIG_PACKAGE_modemmanager-ppp=y" >> .config
          sed -i '/CONFIG_PACKAGE_luci-proto-qmi/d' .config && echo "CONFIG_PACKAGE_luci-proto-qmi=y" >> .config
          sed -i '/CONFIG_PACKAGE_qmi-utils/d' .config && echo "CONFIG_PACKAGE_qmi-utils=y" >> .config
          sed -i '/CONFIG_PACKAGE_uqmi/d' .config && echo "CONFIG_PACKAGE_uqmi=y" >> .config
          # 直接引用本地package目录下的包
          sed -i '/CONFIG_PACKAGE_qwrt-modem/d' .config && echo "CONFIG_PACKAGE_qwrt-modem=y" >> .config
          sed -i '/CONFIG_PACKAGE_qwrt-modem-quectel/d' .config && echo "CONFIG_PACKAGE_qwrt-modem-quectel=y" >> .config

      - name: 复制自定义设备配置
        run: |
          cp -r ./files istoreos-src/ 2>/dev/null || true
          mkdir -p istoreos-src/files/etc/modprobe.d/
          echo "options qcserial vendor=0x05c6 product=0x90b2" > istoreos-src/files/etc/modprobe.d/fm35ogl.conf

      - name: 更新基础feeds并安装所有包（不含网络源）
        run: |
          cd istoreos-src
          # 只更新基础源（不涉及qwrt/quectel）
          ./scripts/feeds update base packages luci
          # 安装基础包+本地package目录下的包（无需更新qwrt/quectel，因为已在本地）
          ./scripts/feeds install -a

      - name: 编译固件
        run: |
          cd istoreos-src
          make -j$(nproc) defconfig
          make -j$(nproc) download V=s
          make -j$(nproc) V=s

      - name: 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-rk3568-5g-firmware
          path: istoreos-src/bin/targets/rockchip/armv8/*.img
