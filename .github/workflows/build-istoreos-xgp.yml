name: 本地编译iStoreOS-XGP（Ubuntu专属）

# 触发条件：手动触发 + 配置文件修改时自动触发
on:
  workflow_dispatch:  # 本地编译优先手动触发，灵活控制
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/local-build.yml'
      - 'xgp-qmodem.config'
      - 'files/**'

jobs:
  local-build:
    # 关键：指定使用本地 self-hosted Runner（需提前安装注册）
    runs-on: self-hosted
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      ISTOREOS_BRANCH: "istoreos-24.10"  # 官方稳定分支，避免编译bug
      LOCAL_BUILD_DIR: "${{ github.workspace }}/build"  # 本地编译目录

    steps:
      - name: 1. 拉取仓库代码（含配置文件和预配置）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 仅拉取最新代码，加快速度

      - name: 2. 检查并补全本地依赖（适配Ubuntu）
        run: |
          echo "===== 检查本地系统依赖 ====="
          # 必需依赖列表（本地Ubuntu可能已安装，未安装则自动补充）
          REQUIRED_PACKAGES="build-essential flex bison g++ gawk gcc-multilib \
            gettext git libncurses5-dev libssl-dev libelf-dev python3 python3-pip \
            rsync unzip wget zlib1g-dev quilt u-boot-tools squashfs-tools \
            meson ninja-build cmake device-tree-compiler liblz4-tool"

          # 检查并安装缺失的依赖
          for pkg in $REQUIRED_PACKAGES; do
            if ! dpkg -l | grep -q "$pkg"; then
              echo "缺失依赖 $pkg，正在安装..."
              sudo apt update -y && sudo apt install -y "$pkg"
            fi
          done

          # 检查Python关键模块（U-Boot编译必需）
          echo "===== 检查Python模块 ====="
          if ! python3 -c "import elftools" &> /dev/null; then
            echo "缺失pyelftools模块，正在安装..."
            python3 -m pip install pyelftools --upgrade --user
          fi

          # 验证核心工具是否可用
          REQUIRED_TOOLS="gcc make python3 wget unzip mksquashfs"
          for tool in $REQUIRED_TOOLS; do
            if ! command -v $tool &> /dev/null; then
              echo "ERROR: 核心工具 $tool 不可用！请手动安装"
              exit 1
            fi
          done
          echo "===== 所有依赖检查通过 ====="

      - name: 3. 缓存编译资源（本地加速，避免重复下载）
        uses: actions/cache@v3
        with:
          # 缓存下载的组件源码和软件源（第二次编译省30%时间）
          path: |
            ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/dl
            ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/feeds
          # 缓存key：基于系统+分支+配置文件哈希，配置变了才更新缓存
          key: ${{ runner.os }}-istoreos-${{ env.ISTOREOS_BRANCH }}-${{ hashFiles('xgp-qmodem.config') }}
          restore-keys: |
            ${{ runner.os }}-istoreos-${{ env.ISTOREOS_BRANCH }}-

      - name: 4. 克隆iStoreOS稳定分支（本地编译目录）
        run: |
          # 创建本地编译目录（避免与仓库代码混淆）
          mkdir -p ${{ env.LOCAL_BUILD_DIR }}
          cd ${{ env.LOCAL_BUILD_DIR }}

          # 克隆或更新iStoreOS源码（本地克隆一次即可，后续pull更新）
          if [ ! -d "${{ env.FIRMWARE_DIST }}" ]; then
            git clone https://github.com/istoreos/istoreos.git ${{ env.FIRMWARE_DIST }}
          fi

          # 切换到稳定分支并拉取最新代码
          cd ${{ env.FIRMWARE_DIST }}
          git checkout ${{ env.ISTOREOS_BRANCH }}
          git pull
          echo "===== 当前源码信息 ====="
          echo "分支：$(git branch --show-current)"
          echo "最新commit：$(git rev-parse --short HEAD)"

      - name: 5. 同步软件源（国内优化，含QModem）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}

          # 关键：替换为国内源（中科大/阿里云），解决本地下载慢
          sed -i 's#https://downloads.openwrt.org#https://mirrors.ustc.edu.cn/openwrt#g' feeds.conf.default
          sed -i 's#https://mirrors.cernet.edu.cn#https://mirrors.ustc.edu.cn#g' feeds.conf.default

          # 添加QModem 5G插件源（本地同步更快）
          if ! grep -q "qmodem" feeds.conf.default; then
            echo "src-git qmodem https://github.com/FUjr/QModem.git" >> feeds.conf.default
          fi

          # 同步软件源（本地网络快，无需静默，显示进度）
          echo "===== 同步软件源 ====="
          ./scripts/feeds update -a
          # 强制安装所有包（确保QModem依赖完整）
          ./scripts/feeds install -a -f
          echo "===== 软件源同步完成 ====="

      - name: 6. 导入XGP设备配置文件
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}

          # 从仓库复制配置文件（本地路径，无需wget下载）
          cp ${{ github.workspace }}/xgp-qmodem.config .config

          # 生成完整编译配置（自动补全依赖）
          make defconfig

          # 验证核心配置是否生效
          echo "===== 验证配置 ====="
          if ! grep -q "CONFIG_TARGET_rockchip=y" .config; then
            echo "ERROR: 配置文件未指定Rockchip平台！"
            exit 1
          fi
          if ! grep -q "CONFIG_PACKAGE_luci-app-qmodem=y" .config; then
            echo "ERROR: QModem插件未启用！"
            exit 1
          fi
          echo "===== 配置验证通过 ====="

      - name: 7. 本地多核编译固件（自动适配CPU核心）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}

          # 显示本地CPU核心数，确认编译参数
          CPU_CORES=$(nproc)
          echo "===== 本地CPU核心数：$CPU_CORES，使用 -j$CPU_CORES 编译 ====="

          # 编译：多核+精简日志+进度提示（每10分钟输出当前步骤）
          # 超时保护：本地编译最长3小时（足够完成）
          timeout 180m bash -c "
            make -j$CPU_CORES V=m 2>&1 | tee build.log &
            PID=\$!
            # 每10分钟输出一次进度，避免不知道卡在哪
            while kill -0 \$PID 2>/dev/null; do
              echo \"===== 编译中（$(date +%H:%M:%S)），当前进度：\"
              grep -E \"Compiling|Linking|Installing\" build.log | tail -5
              sleep 600
            done
            wait \$PID
          "

          # 验证固件是否生成
          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ ! -d "$FIRMWARE_DIR" ] || [ -z "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "ERROR: 编译失败！最后1000行日志："
            cat build.log | tail -1000
            exit 1
          fi
          echo "===== 固件编译成功！ ====="

      - name: 8. 打包产物（本地+GitHub双备份）
        run: |
          # 本地产物目录（方便直接取用）
          LOCAL_OUTPUT_DIR="${{ github.workspace }}/local-firmware-output"
          mkdir -p $LOCAL_OUTPUT_DIR

          # GitHub产物目录（上传到Actions Artifacts）
          GITHUB_OUTPUT_DIR="${{ env.LOCAL_BUILD_DIR }}/output"
          mkdir -p $GITHUB_OUTPUT_DIR

          # 复制核心文件
          FIRMWARE_DIR="${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          cp $FIRMWARE_DIR/*.sysupgrade.bin $LOCAL_OUTPUT_DIR/
          cp $FIRMWARE_DIR/*.factory.img $LOCAL_OUTPUT_DIR/ 2>/dev/null
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/.config $LOCAL_OUTPUT_DIR/final_config.config
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/build.log $LOCAL_OUTPUT_DIR/build_log.txt

          # 同步到GitHub产物目录（用于上传）
          cp -r $LOCAL_OUTPUT_DIR/* $GITHUB_OUTPUT_DIR/

          # 显示产物列表
          echo "===== 本地产物目录：$LOCAL_OUTPUT_DIR ====="
          ls -l $LOCAL_OUTPUT_DIR

      - name: 9. 上传产物到GitHub（备份+远程取用）
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-local-xgp-firmware
          path: ${{ env.LOCAL_BUILD_DIR }}/output/
          retention-days: 30  # 保留30天，方便后续下载
