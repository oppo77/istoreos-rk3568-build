name: 编译 iStoreOS 固件（RK3568 + 修复 ipkg-make-index）

on:
  workflow_dispatch:
    inputs:
      wifi_2g_ssid:
        description: "2.4G WiFi名称"
        required: true
        default: "iStoreOS-2.4G"
      wifi_2g_pass:
        description: "2.4G WiFi密码（8-63位）"
        required: true
        default: "12345678"
      wifi_5g_ssid:
        description: "5G WiFi名称"
        required: true
        default: "iStoreOS-5G"
      wifi_5g_pass:
        description: "5G WiFi密码（8-63位）"
        required: true
        default: "12345678"
      apn_5g:
        description: "5G模块APN"
        required: true
        default: "cmnet"
  push:
    branches:
      - main

jobs:
  build-firmware:
    runs-on: ubuntu-22.04
    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 2. 深度清理磁盘空间
        run: |
          echo "=== 清理前磁盘空间 ==="
          df -h /
          
          sudo rm -rf /usr/share/dotnet /usr/local/share/powershell /usr/local/lib/android /opt/ghc || true
          sudo apt-get -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* powershell* dotnet* mono* || true
          sudo apt-get autoremove -y && sudo apt-get clean
          
          echo "=== 清理后磁盘空间 ==="
          df -h /
          FREE_SPACE=$(df -P / | awk 'NR==2 {print $4}')
          if [ $FREE_SPACE -lt 26214400 ]; then
            echo "错误：磁盘空间不足25GB！"
            exit 1
          fi

      - name: 3. 安装编译依赖（含libtool）
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            axel ccache git build-essential libncurses5-dev libssl-dev \
            flex bison make gcc g++ gettext python3 python3-pip python3-setuptools \
            unzip wget curl nano file qemu-utils libtool
          if ! command -v libtool &> /dev/null; then
            echo "错误：libtool安装失败！"
            exit 1
          fi

      - name: 4. 克隆iStoreOS源码
        run: |
          git clone https://github.com/oppo77/istoreos-rk3568-build.git openwrt
          cd openwrt
          git checkout refs/heads/main
          if [ ! -d "./package" ] || [ ! -d "./target" ]; then
            echo "错误：源码克隆不完整！"
            exit 1
          fi
          echo "=== 源码克隆完成 ==="

      - name: 5. 下载你的xgp.config配置文件
        run: |
          cd openwrt
          # 使用你的xgp.config原始地址
          AXEL_URL="https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/refs/heads/main/xgp.config"
          axel -n 8 -o .config "$AXEL_URL"
          
          if [ ! -f ".config" ] || [ $(wc -l < .config) -lt 100 ]; then
            echo "错误：xgp.config下载失败！"
            exit 1
          fi
          
          if ! grep -q "CONFIG_MACH_ROCKCHIP_RK3568=y" .config; then
            echo "错误：未启用RK3568配置！"
            exit 1
          fi
          
          # 验证strace是否已禁用（关键优化项）
          if grep -q "CONFIG_PACKAGE_strace=y" .config; then
            echo "警告：xgp.config中仍启用strace，可能导致编译失败！建议注释该配置。"
          fi
          echo "=== xgp.config验证完成 ==="

      - name: 6. 检查并修复ipkg-make-index工具
        run: |
          cd openwrt
          TOOL_PATH=$(find ./staging_dir -name "ipkg-make-index" -type f | head -1)
          
          if [ -z "$TOOL_PATH" ]; then
            echo "=== 单独编译opkg主机端 ==="
            make package/system/opkg/host-compile -j1 V=s
            TOOL_PATH=$(find ./staging_dir -name "ipkg-make-index" -type f | head -1)
            if [ -z "$TOOL_PATH" ]; then
              echo "错误：opkg编译失败！"
              exit 1
            fi
          fi
          
          if [ ! -x "$TOOL_PATH" ]; then
            chmod +x "$TOOL_PATH"
          fi
          
          if ! "$TOOL_PATH" --help > /dev/null 2>&1; then
            echo "错误：工具不可执行！"
            exit 1
          fi
          
          export PATH=$PATH:$(dirname "$TOOL_PATH")
          echo "=== 工具验证通过 ==="

      - name: 7. 配置axel多线程下载
        run: |
          cd openwrt
          sed -i 's/^WGET_CMD.*/WGET_CMD = axel -n 8 -a -o $(DL_DIR)\/\$(FILE) $(URL)/' ./include/download.mk
          echo "DOWNLOAD_TIMEOUT=1200" >> ./include/download.mk
          echo "CONFIG_CCACHE=y" >> .config

      - name: 8. 清理旧产物
        run: |
          cd openwrt
          make clean && make dirclean
          ccache -C

      - name: 9. 编译固件（单线程+详细日志）
        run: |
          cd openwrt
          TOOL_PATH=$(find ./staging_dir -name "ipkg-make-index" -type f | head -1)
          export PATH=$PATH:$(dirname "$TOOL_PATH")
          
          echo "=== 开始编译 ==="
          make -j1 V=s
          
          FIRMWARE_DIR="./bin/targets/rockchip/armv8"
          if [ ! -d "$FIRMWARE_DIR" ] || ! ls "$FIRMWARE_DIR"/*.img* &> /dev/null; then
            echo "错误：固件生成失败！"
            exit 1
          fi
          echo "=== 编译成功 ==="

      - name: 10. 整理产物
        run: |
          mkdir -p final-firmware
          FIRMWARE_DIR="./openwrt/bin/targets/rockchip/armv8"
          cp "$FIRMWARE_DIR"/*.img.gz final-firmware/ || true
          cp "$FIRMWARE_DIR"/*.img final-firmware/ || true
          
          echo "=== 固件信息 ===" > final-firmware/固件信息.txt
          echo "编译时间：$(date)" >> final-firmware/固件信息.txt
          echo "硬件：RK3568 + MT7916 + FM350gl" >> final-firmware/固件信息.txt
          echo "WiFi：2.4G=$WIFI_2G_SSID / 5G=$WIFI_5G_SSID" >> final-firmware/固件信息.txt
          echo "5G APN：$APN_5G" >> final-firmware/固件信息.txt
          ls -l final-firmware/ >> final-firmware/固件信息.txt

      - name: 11. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: iStoreOS-RK3568-固件-${{ github.run_number }}
          path: final-firmware/
          retention-days: 30
          if-no-files-found: error
