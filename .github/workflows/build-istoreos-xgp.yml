name: 【终极版】XGP-iStoreOS 编译（强制Python+全流程FORCE）

on:
  workflow_dispatch:
    inputs:
      lan_ip:
        description: 'LAN 管理IP'
        required: true
        default: '192.168.10.1'
      wifi_ssid:
        description: 'WiFi热点名称'
        required: true
        default: 'XGP-5G-Hotspot'
      wifi_password:
        description: 'WiFi密码'
        required: true
        default: 'XGP123456'

env:
  REPO_URL: https://github.com/istoreos/istoreos
  REPO_BRANCH: istoreos-24.10  # 稳定分支
  XGP_CONFIG_URL: https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/refs/heads/main/XGP.config
  TZ: Asia/Shanghai

jobs:
  build-ultimate:
    runs-on: ubuntu-22.04
    steps:
      ###########################################################################
      # 步骤1：基础准备 + 强制创建 Python 软链接（核心！）
      ###########################################################################
      - name: 1. 初始化环境 + 强制创建 Python 软链接
        run: |
          # 1. 清理旧环境（避免冲突）
          sudo rm -rf /etc/apt/sources.list.d/* /usr/bin/python /usr/bin/python2
          sudo apt update -qq && sudo apt full-upgrade -yq

          # 2. 安装核心依赖（含Python3全家桶）
          sudo apt install -yq \
            python3 python3-pip python3-distutils python3-setuptools python3-pyelftools \
            build-essential git libncurses5-dev zlib1g-dev libssl-dev flex bison \
            rsync wget file which sed grep gcc-multilib g++-multilib device-tree-compiler

          # 3. 终极操作：手动创建 /usr/bin/python 指向 Python3（解决脚本硬编码调用）
          sudo ln -s /usr/bin/python3 /usr/bin/python
          echo "=== 验证 Python 软链接 ==="
          ls -l /usr/bin/python  # 必须显示 -> /usr/bin/python3
          python --version       # 必须显示 Python 3.10.x（ubuntu 22.04 默认）
          python3 --version      # 必须显示 Python 3.10.x
          echo "=== Python 环境已强制设置为 Python3 ==="

          # 4. 验证 distutils 模块（确保能被找到）
          echo -e "\n=== 验证 distutils 模块 ==="
          python -c "import distutils; print('distutils 加载成功，路径：', distutils.__file__)"
          python3 -c "import distutils; print('distutils 加载成功，路径：', distutils.__file__)"

      ###########################################################################
      # 步骤2：拉取源码 + 下载 XGP 配置
      ###########################################################################
      - name: 2. 拉取源码 + 导入 XGP 配置
        run: |
          # 拉取源码
          git clone --depth=1 -b $REPO_BRANCH $REPO_URL istoreos-src
          cd istoreos-src

          # 下载你的 XGP.config
          wget -q -O .config $XGP_CONFIG_URL
          echo "=== XGP 配置已导入 ==="
          cat .config | grep "TARGET_ARCH"  # 验证配置是否正确（显示架构）

      ###########################################################################
      # 步骤3：自定义配置（LAN IP + 5G/WiFi 自启动）
      ###########################################################################
      - name: 3. 自定义系统配置
        run: |
          cd istoreos-src
          # 设置 LAN IP
          sed -i "s/192\.168\.[0-9]*\.[0-9]*/${{ github.event.inputs.lan_ip }}/g" package/base-files/files/bin/config_generate

          # 添加 5G+WiFi 自启动脚本
          mkdir -p files/etc/init.d/
          cat > files/etc/init.d/auto-5g-wifi << 'EOF'
          #!/bin/sh /etc/rc.common
          START=99
          start_5g() { [ -e /dev/cdc-wdm0 ] && uqmi -d /dev/cdc-wdm0 --start-network cmnet --autoconnect; }
          start_wifi() { uci set wireless.radio1.disabled=0; uci set wireless.@wifi-iface[0].ssid="${SSID}"; uci set wireless.@wifi-iface[0].key="${PWD}"; uci commit wireless; /etc/init.d/network restart; }
          start() { start_5g; start_wifi; }
          EOF

          # 注入 WiFi 参数
          sed -i "s|\${SSID}|${{ github.event.inputs.wifi_ssid }}|g" files/etc/init.d/auto-5g-wifi
          sed -i "s|\${PWD}|${{ github.event.inputs.wifi_password }}|g" files/etc/init.d/auto-5g-wifi
          chmod +x files/etc/init.d/auto-5g-wifi
          echo "/etc/init.d/auto-5g-wifi start" >> files/etc/rc.local

          # 确保 5G/WiFi 依赖包
          echo "CONFIG_PACKAGE_qmi-utils=y" >> .config
          echo "CONFIG_PACKAGE_uqmi=y" >> .config
          echo "CONFIG_PACKAGE_hostapd-common=y" >> .config

      ###########################################################################
      # 步骤4：编译（全流程 FORCE=1 + 静默模式）
      ###########################################################################
      - name: 4. 编译固件（全流程 FORCE=1）
        run: |
          cd istoreos-src
          # 1. 生成配置：硬加 FORCE=1（跳过检查）
          make defconfig FORCE=1 -s 2>/dev/null
          echo "=== 配置生成完成（已跳过依赖检查） ==="

          # 2. 下载依赖包（多线程，快速完成）
          make download -j8 -s 2>/dev/null
          find dl -size -1024c -exec rm -f {} \;  # 删除不完整包

          # 3. 编译：硬加 FORCE=1 + 静默模式（日志最少）
          echo "=== 开始编译（已跳过所有依赖检查） ==="
          make -j$(nproc) FORCE=1 -s V=s 2>&1 | tee build.log

          # 验证编译结果
          FIRMWARE=$(find bin/targets/ -name "*.img.gz" -o -name "*.bin")
          if [ -n "$FIRMWARE" ]; then
            echo -e "\n=== 编译成功！固件路径： ==="
            echo "$FIRMWARE"
          else
            echo -e "\n=== 编译失败，最后50行日志： ==="
            tail -50 build.log
          fi

      ###########################################################################
      # 步骤5：上传产物
      ###########################################################################
      - name: 5. 上传固件和日志
        uses: actions/upload-artifact@v4
        with:
          name: XGP-iStoreOS-ultimate
          path: |
            istoreos-src/bin/targets/**/*.img.gz
            istoreos-src/bin/targets/**/*.bin
            istoreos-src/build.log
          retention-days: 7
