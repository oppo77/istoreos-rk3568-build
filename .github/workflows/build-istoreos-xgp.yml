name: 编译iStoreOS-XGP（最新版+QModem5G）

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build-istoreos-xgp.yml'
      - 'xgp-qmodem.config'
      - 'files/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      - name: 2. 更换源+强制安装所有依赖（重点修复squashfs-tools）
        run: |
          # 更换阿里云源，确保squashfs-tools包可获取
          sudo sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
          sudo sed -i s@/security.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list
          sudo apt clean && sudo apt update -y

          # 单独强制安装squashfs-tools（核心修复）
          echo "===== 优先安装squashfs-tools ====="
          if ! sudo apt install -y squashfs-tools; then
            echo "===== 第一次安装失败，重试 ====="
            sudo apt install -y squashfs-tools  # 重试一次
          fi

          # 验证squashfs-tools是否安装成功
          if ! command -v mksquashfs &> /dev/null; then
            echo "ERROR: squashfs-tools 仍然未安装成功！请检查apt源是否包含该包"
            exit 1
          fi
          echo "===== squashfs-tools 安装验证通过 ====="

          # 安装其他必需依赖
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libncursesw5-dev libssl-dev libelf-dev \
            libtool autoconf automake pkg-config perl python3 python3-pip \
            python3-setuptools python3-yaml rsync subversion unzip wget \
            zlib1g-dev quilt libc6-dev-i386 u-boot-tools dosfstools mtools parted \
            dwarves bc liblz4-tool meson ninja-build cmake \
            patchelf libseccomp-dev device-tree-compiler

          # 验证其他关键工具
          REQUIRED_TOOLS="xz gcc g++ make python3 rsync wget unzip meson ninja cmake"
          for tool in $REQUIRED_TOOLS; do
            if ! command -v $tool &> /dev/null; then
              echo "ERROR: 依赖 $tool 未安装！"
              exit 1
            fi
          done

      - name: 3. 克隆iStoreOS最新源码
        run: |
          git clone https://github.com/istoreos/istoreos.git $FIRMWARE_DIST
          cd $FIRMWARE_DIST
          git pull
          echo "当前源码commit：$(git rev-parse --short HEAD)"

      - name: 4. 同步软件源（含QModem）
        run: |
          cd $FIRMWARE_DIST
          echo "src-git qmodem https://github.com/FUjr/QModem.git" >> feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a -f

      - name: 5. 导入配置文件
        run: |
          cd $FIRMWARE_DIST
          CONFIG_URL="https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/main/xgp-qmodem.config"
          wget --no-check-certificate -O .config "$CONFIG_URL" || exit 1
          make defconfig
          grep -q "CONFIG_TARGET_rockchip=y" .config || exit 1
          grep -q "CONFIG_PACKAGE_luci-app-qmodem=y" .config || exit 1

      - name: 6. 执行前置检查
        run: |
          cd $FIRMWARE_DIST
          make prereq V=99 2>&1 | tee prereq.log

      - name: 7. 编译固件
        run: |
          cd $FIRMWARE_DIST
          make -j1 V=s 2>&1 | tee build.log
          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          [ -d "$FIRMWARE_DIR" ] && [ -n "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ] || {
            cat build.log | tail -500
            exit 1
          }

      - name: 8. 打包产物
        run: |
          cd $FIRMWARE_DIST
          mkdir -p output
          cp $FIRMWARE_DIR/*.sysupgrade.bin output/
          cp $FIRMWARE_DIR/*.factory.img output/ 2>/dev/null
          cp .config output/final_config.config
          cp build.log output/build_log.txt
          cp prereq.log output/prereq_check.log

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-latest-xgp-firmware
          path: ${{ env.FIRMWARE_DIST }}/output/
          retention-days: 30
