name: 编译iStoreOS-XGP（带QModem5G与自动配置）

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build-istoreos-xgp.yml'
      - 'xgp-qmodem.config'
      - 'files/**'
  workflow_dispatch:  # 支持手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      # 已填入你的配置文件Raw链接
      CONFIG_URL: "https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/refs/heads/main/xgp-qmodem.config"

    steps:
      - name: 1. 拉取仓库代码（含files目录和配置文件）
        uses: actions/checkout@v4

      - name: 2. 安装编译依赖
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip \
            python3 python3-pip python3-setuptools python3-yaml \
            flex bison bc quilt libelf-dev libffi-dev dwarves \
            u-boot-tools dosfstools mtools parted gcc-multilib

      - name: 3. 克隆iStoreOS源码
        run: |
          git clone https://github.com/istoreos/istoreos.git $FIRMWARE_DIST
          cd $FIRMWARE_DIST
          # 切换到最新稳定版（自动获取最新tag）
          git checkout $(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+' | head -1)

      - name: 4. 集成QModem 5G管理插件
        run: |
          cd $FIRMWARE_DIST
          # 添加QModem软件源
          echo "src-git qmodem https://github.com/FUjr/QModem.git" >> feeds.conf.default
          # 更新并安装所有软件包（精简日志输出）
          ./scripts/feeds update -a > /dev/null 2>&1
          ./scripts/feeds install -a -f

      - name: 5. 下载并验证配置文件
        run: |
          cd $FIRMWARE_DIST
          echo "使用配置文件链接：${{ env.CONFIG_URL }}"
          
          # 预检测URL有效性（避免下载失败）
          if ! curl -s --head "${{ env.CONFIG_URL }}" | grep "HTTP/1.1 200 OK" > /dev/null; then
            echo "ERROR: 配置文件URL无效，请检查链接是否正确！"
            exit 1
          fi
          
          # 下载配置文件到源码目录（命名为.config，OpenWRT默认配置文件名）
          if ! wget -O .config "${{ env.CONFIG_URL }}"; then
            echo "ERROR: 配置文件下载失败！"
            exit 1
          fi
          
          # 生成完整配置（自动补全依赖）
          make defconfig
          
          # 验证QModem是否已正确启用
          if ! grep -q "CONFIG_PACKAGE_luci-app-qmodem=y" .config; then
            echo "ERROR: 配置文件中未启用QModem，请检查xgp-qmodem.config！"
            exit 1
          fi

      - name: 6. 复制预配置文件（实现开机自启功能）
        run: |
          cd $FIRMWARE_DIST
          # 复制仓库中的files目录到源码（包含WiFi和5G自启配置）
          if [ -d "../files" ]; then
            cp -r ../files/ ./files/
            echo "已复制预配置文件："
            ls -R ./files  # 显示复制的文件列表，便于调试
          else
            echo "ERROR: 仓库根目录未找到files目录，请按要求创建！"
            exit 1
          fi

      - name: 7. 编译固件（控制日志大小防中断）
        run: |
          cd $FIRMWARE_DIST
          # 限制编译输出日志级别，并保存完整日志到文件
          make -j$(nproc) V=sc 2>&1 | tee build.log
          
          # 检查固件是否生成
          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ ! -d "$FIRMWARE_DIR" ] || [ -z "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "ERROR: 固件编译失败！以下是最后300行日志："
            cat build.log | tail -300
            exit 1
          fi

      - name: 8. 打包输出产物
        run: |
          cd $FIRMWARE_DIST
          mkdir -p output
          # 复制固件文件
          cp bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/*.sysupgrade.bin output/
          cp bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/*.factory.img output/
          # 复制最终配置和编译日志（用于调试）
          cp .config output/final_config.config
          cp build.log output/build_log.txt

      - name: 9. 上传编译产物（保留30天）
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-xgp-firmware
          path: ${{ env.FIRMWARE_DIST }}/output/
          retention-days: 30
