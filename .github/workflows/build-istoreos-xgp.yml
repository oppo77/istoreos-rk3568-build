name: iStoreOS-xgp-AutoBuild
on:
  workflow_dispatch:
    inputs:
      lan_ip:
        description: '路由器管理IP（LAN地址）'
        required: true
        default: '192.168.10.1'
      wifi_2g_ssid:
        description: '2.4G WiFi热点名称'
        required: true
        default: 'xgp-WiFi-2.4G'
      wifi_5g_ssid:
        description: '5G WiFi热点名称'
        required: true
        default: 'xgp-WiFi-5G'
      wifi_password:
        description: 'WiFi密码（8-63位）'
        required: true
        default: 'xgp123456'
      apn_5g:
        description: '5G模块默认APN（未知运营商时用，移动cmnet/联通3gnet/电信ctnet）'
        required: true
        default: 'cmnet'
permissions:
  contents: read
  packages: read
jobs:
  build_xgp:
    name: Build iStoreOS for xgp (RK3568+FM350gl+MT7916)
    runs-on: ubuntu-22.04
    steps:
      - name: 【深度清理】释放磁盘空间（优先清理Docker/APT）
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 1. 清理Docker残留（最大空间占用项）
          sudo docker builder prune -af || true
          sudo docker rmi `docker images -q 2>/dev/null` || true
          sudo rm -rf /var/lib/docker/volumes/* || true
          
          # 2. 清理系统大目录与缓存
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /var/tmp/*
          sudo rm -rf /home/runner/.cache/* || true  # 用户缓存（npm/pip等）
          
          # 3. 精简依赖安装（RK3568 64位无需multilib）
          sudo apt-get update -qq
          sudo apt-get -y purge azure-cli* docker* ghc* zulu* llvm* firefox google*
          sudo apt-get -y install --no-install-recommends \
            build-essential clang flex bison g++ gawk libncurses5-dev libssl-dev \
            python3 python3-pip rsync subversion swig unzip zlib1g-dev \
            device-tree-compiler liblz4-tool curl wget axel
          sudo pip3 install pyelftools
          
          # 4. 彻底清理APT（释放1-2GB）
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          
          sudo timedatectl set-timezone "Asia/Shanghai"
          df -h /  # 显示剩余空间（调试用）

      - name: 【补充清理】拉满空间释放（第三方工具）
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          large-packages: true
          swap-storage: true
          apt-cache: true
          npm-cache: true

      - name: 拉取外部配置（存放智能脚本）
        uses: actions/checkout@v4
        with:
          path: config-repo
          fetch-depth: 1
          # 注意：此处需替换为你的仓库地址（存放5g-auto脚本的仓库）
          repository: 你的GitHub用户名/你的配置仓库名
          ref: main

      - name: 克隆iStoreOS源码（24.10稳定版）
        uses: actions/checkout@v4
        with:
          repository: istoreos/istoreos
          ref: istoreos-24.10
          path: openwrt
          fetch-depth: 1

      - name: 配置多镜像源（清华/中科大，加速下载）
        run: |
          cd openwrt
          # 替换官方源为清华镜像
          sed -i 's#downloads.openwrt.org#mirrors.tuna.tsinghua.edu.cn/openwrt#g' ./feeds.conf.default
          # 添加多镜像重试（防止单镜像失效）
          echo 'MIRRORS += https://mirrors.ustc.edu.cn/openwrt' >> ./include/download.mk
          echo 'MIRRORS += https://downloads.openwrt.org' >> ./include/download.mk
          # 替换package中的硬编码链接
          find ./package -type f -name "Makefile" -exec sed -i 's#https://downloads.openwrt.org#$(MIRRORS)#g' {} \;

      - name: 替换下载工具为多线程axel（16线程+重试）
        run: |
          cd openwrt
          sed -i 's/^WGET_CMD.*/WGET_CMD = axel -n 16 -a -o $(DL_DIR)\/\$(FILE) $(URL)/' ./include/download.mk
          echo "DOWNLOAD_TIMEOUT=600" >> ./include/download.mk  # 10分钟超时
          echo "DOWNLOAD_RETRIES=5" >> ./include/download.mk    # 5次重试

      - name: 初始化feeds并删除冲突包
        run: |
          cd openwrt
          ./scripts/feeds update -a
          # 删除baidupcs-web（避免编译冲突）
          rm -rf feeds/third/luci-app-baidupcs-web package/feeds/third/luci-app-baidupcs-web 2>/dev/null || true
          rm -rf feeds/third/baidupcs-web package/feeds/third/baidupcs-web 2>/dev/null || true
          ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: 下载【优化后的xgp.config】（含6个关键依赖）
        run: |
          cd openwrt
          # 替换为你的xgp.config地址（如GitHub Gist/你的仓库）
          wget --timeout=30 --tries=3 -O .config "https://raw.githubusercontent.com/你的GitHub用户名/你的配置仓库名/main/xgp.config"
          [ -s .config ] || { echo "Error: xgp.config下载失败或为空！"; exit 1; }
          make defconfig  # 自动补全依赖，确保配置生效

      - name: 【关键】禁用LTO优化（减少30%临时空间占用）
        run: |
          cd openwrt
          if grep -q "CONFIG_LTO" .config; then
            sed -i '/CONFIG_LTO/d' .config
          fi
          echo "CONFIG_LTO=n" >> .config
          echo "CONFIG_LTO_DISABLE=y" >> .config
          grep -E "CONFIG_LTO" .config || echo "LTO已禁用"  # 验证

      - name: 缓存依赖包（dl目录，每周自动更新）
        uses: actions/cache@v3
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-xgp-dl-${{ hashFiles('openwrt/.config') }}-${{ format('{0:YYYY-WW}', github.event.started_at) }}
          restore-keys: |
            ${{ runner.os }}-xgp-dl-${{ hashFiles('openwrt/.config') }}-
          max-size: 8GB  # 限制缓存大小，避免占满空间

      - name: 多线程下载依赖包（失败时单线程排错）
        run: |
          cd openwrt
          echo "16线程加速下载依赖..."
          make download -j16 || make download -j1 V=s  # 失败时显示详细日志
          find openwrt/dl -type f -size 0 -delete || true  # 清理空文件

      - name: 引入【智能5G脚本】并替换默认APN
        run: |
          # 创建脚本目录
          mkdir -p openwrt/files/etc/init.d/
          # 复制智能脚本（路径对应你仓库中的脚本位置）
          cp config-repo/config-files/5g-auto openwrt/files/etc/init.d/
          # 替换脚本中的默认APN（未知运营商时使用）
          sed -i "s/__5G_APN__/${{ github.event.inputs.apn_5g }}/g" openwrt/files/etc/init.d/5g-auto
          # 赋予执行权限（必须，否则开机不启动）
          chmod 755 openwrt/files/etc/init.d/5g-auto
          # 建立开机启动链接（S95：确保在网络服务后执行）
          mkdir -p openwrt/files/etc/rc.d/
          ln -sf ../init.d/5g-auto openwrt/files/etc/rc.d/S955g-auto

      - name: 引入WiFi配置并替换SSID/密码
        run: |
          mkdir -p openwrt/files/etc/config/
          # 复制WiFi模板配置（路径对应你仓库中的wireless文件）
          cp config-repo/config-files/wireless openwrt/files/etc/config/
          # 替换2.4G SSID
          sed -i "s/__WIFI_2G_SSID__/${{ github.event.inputs.wifi_2g_ssid }}/g" openwrt/files/etc/config/wireless
          # 替换5G SSID
          sed -i "s/__WIFI_5G_SSID__/${{ github.event.inputs.wifi_5g_ssid }}/g" openwrt/files/etc/config/wireless
          # 替换WiFi密码
          sed -i "s/__WIFI_PASSWORD__/${{ github.event.inputs.wifi_password }}/g" openwrt/files/etc/config/wireless

      - name: 设置LAN管理IP（用户输入的地址）
        run: |
          cd openwrt
          sed -i "s/192\.168\.[0-9]*\.[0-9]*/${{ github.event.inputs.lan_ip }}/g" package/base-files/files/bin/config_generate

      - name: 缓存工具链（加速二次编译）
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          mixkey: ${{ runner.os }}-xgp-24.10
          prefix: ${{ github.workspace }}/openwrt
          max-size: 5GB

      - name: 编译固件（2线程平衡速度与稳定性）
        run: |
          cd openwrt
          echo "使用2线程编译..."
          make -j2 || make -j1 V=s  # 失败时单线程输出详细日志

      - name: 清理临时文件（释放空间，便于打包）
        run: |
          sudo rm -rf openwrt/logs/* || true  # 编译日志（1-2GB）
          sudo rm -rf openwrt/build_dir/target-*/tmp/* || true  # 临时文件

      - name: 整理固件产物（只保留镜像，删除冗余packages）
        run: |
          mkdir -p ./final-firmware
          cp -rf openwrt/bin/targets/rockchip/armv8/* ./final-firmware/
          rm -rf ./final-firmware/packages  # 删除packages目录（3-4GB）

      - name: 上传固件到Artifact（便于下载）
        uses: actions/upload-artifact@v4
        with:
          name: iStoreOS-xgp-Firmware-${{ github.run_id }}
          path: ./final-firmware/
