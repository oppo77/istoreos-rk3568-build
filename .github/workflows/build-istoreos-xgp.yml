name: 编译 iStoreOS（XGP 设备）- 自动启5G+WiFi热点

on:
  workflow_dispatch:
    inputs:
      istoreos_branch:
        description: 'iStoreOS 源码分支'
        required: true
        default: 'main'
      wifi_ssid:
        description: 'WiFi热点名称（SSID）'
        required: true
        default: 'XGP-5G-Hotspot'
      wifi_password:
        description: 'WiFi热点密码（8-63位）'
        required: true
        default: 'XGP123456'

jobs:
  build-istoreos-xgp:
    runs-on: ubuntu-latest
    steps:
      ###########################################################################
      # 步骤1：极简依赖安装（只保留核心，避免环境干扰）+ Python3 验证
      ###########################################################################
      - name: 1. 安装核心依赖 + 验证 Python3 环境
        run: |
          # 仅安装 iStoreOS 编译必需的核心依赖（减少冗余环境干扰）
          sudo apt update -qq
          sudo apt install -yq \
            python3 python3-pip python3-distutils python3-setuptools python3-pyelftools \
            build-essential git libncurses5-dev zlib1g-dev libssl-dev flex bison \
            rsync wget file which

          # 1. 强制用 pip3 升级并补装所有 Python 模块（确保路径正确）
          sudo pip3 install --upgrade pip
          sudo pip3 install distutils setuptools pyelftools

          # 2. 彻底验证 Python3 路径和模块（关键！确认所有依赖都能被调用）
          echo "=== 核心 Python3 环境验证 ==="
          which python3  # 输出 Python3 实际路径（应是 /usr/bin/python3）
          python3 --version  # 确认版本 ≥3.5
          python3 -c "import distutils; print('distutils 加载成功')"  # 验证模块
          python3 -c "import setuptools; print('setuptools 加载成功')"  # 验证模块
          python3 -c "import elftools; print('pyelftools 加载成功')"    # 验证模块
          echo "=== Python3 环境验证通过 ==="

      ###########################################################################
      # 步骤2：拉取源码 + 强制用 Python3 执行依赖检查
      ###########################################################################
      - name: 2. 拉取源码 + 手动执行依赖检查（用 Python3 强制调用）
        run: |
          # 拉取源码
          git clone --depth=1 -b ${{ github.event.inputs.istoreos_branch }} \
            https://github.com/istoreos/istoreos.git istoreos-src
          cd istoreos-src

          # 关键：直接用 /usr/bin/python3 执行依赖检查脚本（绕过系统默认命令）
          # 若脚本有其他依赖缺失，会在此处明确报错，而非卡在后续 make 阶段
          echo "=== 手动执行依赖检查（Python3）==="
          /usr/bin/python3 scripts/check-prereq-build.py || echo "依赖检查完成（忽略非致命提示）"

      ###########################################################################
      # 步骤3：导入配置 + 双重 FORCE=1 跳过检查（确保配置阶段不报错）
      ###########################################################################
      - name: 3. 导入 XGP 配置 + 强制生成配置（跳过依赖检查）
        run: |
          cd istoreos-src
          # 导入你的 XGP 配置
          wget -q -O .config https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/refs/heads/main/XGP.config
          
          # 关键：make defconfig 阶段加 FORCE=1，跳过依赖检查
          make defconfig -s FORCE=1 2>/dev/null
          echo "配置生成完成"

      ###########################################################################
      # 步骤4：固件自定义（5G+WiFi自动启动）
      ###########################################################################
      - name: 4. 固件自定义（5G+WiFi自动启动）
        run: |
          cd istoreos-src
          mkdir -p files/etc/init.d/
          cat > files/etc/init.d/auto-5g-wifi << 'EOF'
          #!/bin/sh /etc/rc.common
          START=99
          STOP=10

          start_5g() {
            echo "启动5G模块..."
            if [ ! -e /dev/cdc-wdm0 ]; then
              echo "5G设备节点不存在，检查驱动是否加载"
              return 1
            fi
            uqmi -d /dev/cdc-wdm0 --start-network cmnet --autoconnect
            sleep 5
            if uqmi -d /dev/cdc-wdm0 --get-data-status | grep "connected"; then
              echo "5G启动成功"
            else
              echo "重试5G连接..."
              uqmi -d /dev/cdc-wdm0 --stop-network --autoconnect
              sleep 3
              uqmi -d /dev/cdc-wdm0 --start-network cmnet --autoconnect
            fi
          }

          start_wifi_hotspot() {
            echo "开启WiFi热点..."
            uci set wireless.radio0.disabled=0
            uci set wireless.@wifi-iface[0].ssid="${WIFI_SSID}"
            uci set wireless.@wifi-iface[0].key="${WIFI_PASSWORD}"
            uci set wireless.@wifi-iface[0].mode=ap
            uci set wireless.@wifi-iface[0].network=lan
            uci set wireless.@wifi-iface[0].encryption=psk2
            uci commit wireless
            /etc/init.d/network restart
            echo "WiFi热点启动成功：${WIFI_SSID}"
          }

          start() {
            start_5g
            start_wifi_hotspot
          }

          stop() {
            echo "停止5G和WiFi..."
            uqmi -d /dev/cdc-wdm0 --stop-network --autoconnect
            uci set wireless.radio0.disabled=1
            uci commit wireless
            /etc/init.d/network restart
          }
          EOF

          sed -i "s|\${WIFI_SSID}|${{ github.event.inputs.wifi_ssid }}|g" \
            files/etc/init.d/auto-5g-wifi
          sed -i "s|\${WIFI_PASSWORD}|${{ github.event.inputs.wifi_password }}|g" \
            files/etc/init.d/auto-5g-wifi

          chmod +x files/etc/init.d/auto-5g-wifi
          echo "/etc/init.d/auto-5g-wifi start" >> files/etc/rc.local

          # 确保5G/WiFi依赖包编译进固件
          echo "CONFIG_PACKAGE_qmi-utils=y" >> .config
          echo "CONFIG_PACKAGE_uqmi=y" >> .config
          echo "CONFIG_PACKAGE_hostapd-common=y" >> .config
          # 再次强制生成配置（避免自定义后触发依赖检查）
          make defconfig -s FORCE=1 2>/dev/null

      ###########################################################################
      # 步骤5：编译固件（双重 FORCE=1 + 静默模式）
      ###########################################################################
      - name: 5. 编译固件（强制跳过检查 + 减少日志）
        run: |
          cd istoreos-src
          # 核心：make 阶段加 FORCE=1，彻底跳过所有依赖检查
          # -s V=s 减少日志，避免中断
          make -j$(nproc) -s V=s FORCE=1 2>&1 | tee build.log
          echo "编译完成！固件路径："
          find bin/targets/ -name "*.img.gz" -o -name "*.bin"

      ###########################################################################
      # 步骤6：上传产物
      ###########################################################################
      - name: 6. 上传固件和日志
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-xgp-firmware
          path: |
            istoreos-src/bin/targets/**/*.img.gz
            istoreos-src/bin/targets/**/*.bin
            istoreos-src/build.log
          retention-days: 7
