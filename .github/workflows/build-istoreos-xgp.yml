name: iStoreOS-xgp-AutoBuild

on:
  workflow_dispatch:
    inputs:
      lan_ip:
        description: '路由器管理IP（LAN地址）'
        required: true
        default: '192.168.10.1'
      wifi_2g_ssid:
        description: '2.4G WiFi热点名称'
        required: true
        default: 'xgp-WiFi-2.4G'
      wifi_5g_ssid:
        description: '5G WiFi热点名称'
        required: true
        default: 'xgp-WiFi-5G'
      wifi_password:
        description: 'WiFi密码（8-63位）'
        required: true
        default: 'xgp123456'
      5g_apn:
        description: '5G模块APN（移动cmnet/联通3gnet/电信ctnet）'
        required: true
        default: 'cmnet'

permissions:
  contents: read
  packages: read

jobs:
  build_xgp:
    name: Build iStoreOS for xgp (RK35xx)
    runs-on: ubuntu-22.04
    steps:
      - name: Clean space & Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q 2>/dev/null` || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          sudo apt update -qq
          sudo apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google*
          sudo apt -y install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-pip rsync subversion \
            swig unzip zlib1g-dev device-tree-compiler liblz4-tool curl wget
          sudo pip3 install pyelftools
          sudo apt autoremove --purge -y
          sudo apt clean -y
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          large-packages: true
          swap-storage: true

      - name: Clone iStoreOS source
        uses: actions/checkout@v4
        with:
          repository: istoreos/istoreos
          ref: istoreos-24.10
          path: openwrt
          fetch-depth: 1

      - name: Download xgp.config
        run: |
          cd openwrt
          wget --timeout=30 --tries=3 -O .config "https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/refs/heads/main/xgp.config"
          [ -s .config ] || { echo "Error: xgp.config is empty!"; exit 1; }
          echo "✅ xgp.config downloaded successfully"

      - name: Configure 5G auto-start
        run: |
          mkdir -p openwrt/files/etc/init.d/
          cat > openwrt/files/etc/init.d/5g-auto << 'EOF'
#!/bin/sh /etc/rc.common
START=95
STOP=05

5G_APN="${5G_APN:-cmnet}"

start() {
    echo "[5G-AUTO] Starting 5G module..."
    for i in $(seq 1 30); do
        if ip link show wwan0 > /dev/null 2>&1; then
            echo "[5G-AUTO] WWAN interface (wwan0) ready"
            break
        fi
        sleep 1
    done
    [ ! -x /usr/bin/uqmi ] && { echo "[5G-AUTO] uqmi not found!"; return 1; }
    uqmi -d /dev/cdc-wdm0 --reset-device > /dev/null 2>&1
    sleep 3
    uqmi -d /dev/cdc-wdm0 --set-apn "$5G_APN" > /dev/null 2>&1
    uqmi -d /dev/cdc-wdm0 --start-network "$5G_APN" --autoconnect > /dev/null 2>&1
    sleep 5
    if uqmi -d /dev/cdc-wdm0 --get-data-status | grep -q "connected"; then
        echo "[5G-AUTO] 5G module started successfully"
    else
        echo "[5G-AUTO] Retry starting 5G..."
        uqmi -d /dev/cdc-wdm0 --stop-network > /dev/null 2>&1
        sleep 2
        uqmi -d /dev/cdc-wdm0 --start-network "$5G_APN" --autoconnect > /dev/null 2>&1
    fi
}

stop() {
    echo "[5G-AUTO] Stopping 5G module..."
    [ -x /usr/bin/uqmi ] && uqmi -d /dev/cdc-wdm0 --stop-network > /dev/null 2>&1
}
EOF
          chmod 755 openwrt/files/etc/init.d/5g-auto
          mkdir -p openwrt/files/etc/rc.d/
          ln -sf ../init.d/5g-auto openwrt/files/etc/rc.d/S955g-auto
          echo "5G_APN=${{ github.event.inputs.5g_apn }}" >> openwrt/files/etc/profile

      - name: Configure WiFi auto-start
        run: |
          mkdir -p openwrt/files/etc/config/
          cat > openwrt/files/etc/config/wireless << EOF
config wifi-device 'radio0'
    option type 'mac80211'
    option path 'platform/soc/fe300000.mmci/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'
    option channel '6'
    option band '2g'
    option htmode 'HT20'
    option country 'CN'
    option disabled '0'

config wifi-iface 'default_radio0'
    option device 'radio0'
    option network 'lan'
    option mode 'ap'
    option ssid '${{ github.event.inputs.wifi_2g_ssid }}'
    option encryption 'psk2'
    option key '${{ github.event.inputs.wifi_password }}'

config wifi-device 'radio1'
    option type 'mac80211'
    option path 'platform/soc/fe300000.mmci/mmc_host/mmc2/mmc2:0001/mmc2:0001:1'
    option channel '36'
    option band '5g'
    option htmode 'VHT80'
    option country 'CN'
    option disabled '0'

config wifi-iface 'default_radio1'
    option device 'radio1'
    option network 'lan'
    option mode 'ap'
    option ssid '${{ github.event.inputs.wifi_5g_ssid }}'
    option encryption 'psk2'
    option key '${{ github.event.inputs.wifi_password }}'
EOF

      - name: Set LAN IP address
        run: |
          cd openwrt
          sed -i "s/192\.168\.[0-9]*\.[0-9]*/${{ github.event.inputs.lan_ip }}/g" package/base-files/files/bin/config_generate
          echo "✅ LAN IP set to ${{ github.event.inputs.lan_ip }}"

      - name: Update & install feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate config & Download packages
        run: |
          cd openwrt
          make defconfig
          make download -j16
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd openwrt
          echo "✅ Starting compile with $(nproc) threads"
          make -j$(nproc) || make -j1 V=s
          echo -e "\n✅ Firmware directory size:"
          du -h --max-depth=1 ./bin/targets/rockchip/armv8/

      - name: Organize firmware
        run: |
          mkdir -p ./final-firmware
          cp -rf openwrt/bin/targets/rockchip/armv8/* ./final-firmware/
          rm -rf ./final-firmware/packages

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: iStoreOS-xgp-Firmware-${{ github.run_id }}
          path: ./final-firmware/
