name: 编译iStoreOS-XGP（带QModem5G与自动配置）

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build-istoreos-xgp.yml'
      - 'xgp-qmodem.config'
      - 'files/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4

      - name: 2. 安装【OpenWRT官方完整依赖】（关键修复）
        run: |
          sudo apt update -y
          # 严格按照 OpenWRT 官方文档安装所有必需依赖（针对 Ubuntu 22.04）
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libncursesw5-dev libssl-dev libelf-dev \
            libtool autoconf automake pkg-config perl python3 python3-pip \
            python3-setuptools python3-yaml rsync subversion unzip wget xz-utils \
            zlib1g-dev quilt libc6-dev-i386 u-boot-tools dosfstools mtools parted \
            dwarves bc

          # 手动检查关键依赖是否安装成功（定位缺失的包）
          REQUIRED_TOOLS="gcc g++ make flex bison python3 rsync wget unzip xz-utils"
          for tool in $REQUIRED_TOOLS; do
            if ! command -v $tool &> /dev/null; then
              echo "ERROR: 关键依赖 $tool 未安装成功！"
              exit 1
            fi
          done
          echo "所有关键依赖检查通过"

      - name: 3. 克隆iStoreOS源码并切换稳定版
        run: |
          git clone https://github.com/istoreos/istoreos.git $FIRMWARE_DIST
          cd $FIRMWARE_DIST
          # 切换到 iStoreOS 最新稳定版（v23.05.2 是经测试兼容的版本）
          git checkout v23.05.2
          echo "已切换到 iStoreOS v23.05.2"

      - name: 4. 同步并安装软件源（含QModem）
        run: |
          cd $FIRMWARE_DIST
          # 添加QModem源
          echo "src-git qmodem https://github.com/FUjr/QModem.git" >> feeds.conf.default
          # 完整更新源（不静默，便于排查源同步错误）
          ./scripts/feeds update -a
          # 安装所有软件包（强制覆盖）
          ./scripts/feeds install -a -f

      - name: 5. 导入配置文件并验证
        run: |
          cd $FIRMWARE_DIST
          CONFIG_URL="https://raw.githubusercontent.com/oppo77/istoreos-rk3568-build/main/xgp-qmodem.config"
          echo "下载配置文件：$CONFIG_URL"
          
          # 下载配置文件
          if ! wget --no-check-certificate -O .config "$CONFIG_URL"; then
            echo "ERROR: 配置文件下载失败！请检查仓库是否公开、文件是否存在"
            exit 1
          fi
          
          # 生成完整配置（自动补全依赖）
          make defconfig
          
          # 验证配置有效性
          if ! grep -q "CONFIG_TARGET_rockchip=y" .config; then
            echo "ERROR: 配置文件未指定 Rockchip 平台！"
            exit 1
          fi
          if ! grep -q "CONFIG_PACKAGE_luci-app-qmodem=y" .config; then
            echo "ERROR: QModem 未在配置中启用！"
            exit 1
          fi

      - name: 6. 执行前置检查（手动触发，便于定位错误）
        run: |
          cd $FIRMWARE_DIST
          # 手动运行 prereq 检查，输出详细日志
          make prereq V=99

      - name: 7. 编译固件（单核心模式，提高稳定性）
        run: |
          cd $FIRMWARE_DIST
          # 单核心编译（避免资源不足），保存详细日志
          make -j1 V=s 2>&1 | tee build.log
          
          # 验证固件生成
          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ ! -d "$FIRMWARE_DIR" ] || [ -z "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "ERROR: 固件编译失败！最后500行日志："
            cat build.log | tail -500
            exit 1
          fi

      - name: 8. 打包产物并上传
        run: |
          cd $FIRMWARE_DIST
          mkdir -p output
          cp bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/*.sysupgrade.bin output/
          cp bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/*.factory.img output/ 2>/dev/null
          cp .config output/final_config.config
          cp build.log output/build_log.txt

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-xgp-firmware
          path: ${{ env.FIRMWARE_DIST }}/output/
          retention-days: 30
