name: 本地编译iStoreOS-XGP（实时验证+最小化）

on:
  workflow_dispatch:

jobs:
  local-build:
    runs-on: self-hosted
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      ISTOREOS_BRANCH: "istoreos-24.10"
      LOCAL_BUILD_DIR: "${{ github.workspace }}/build"
      # 直接写死日志中出现的文件路径（确保精准）
      PREREQ_FILE: "${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/include/prereq.mk"
      ISTOREOS_MK: "${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/package/istoreos-files/Makefile"

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 2. 仅安装最核心依赖（排除所有干扰）
        run: |
          sudo apt update -y
          # 只装编译必需的基础工具，不装任何可能冲突的包
          sudo apt install -y build-essential python3 python3-pip git rsync
          # 安装pyelftools（不管路径，先装上）
          sudo pip install pyelftools --upgrade

      - name: 3. 克隆源码+实时修改prereq.mk（每步验证）
        run: |
          mkdir -p ${{ env.LOCAL_BUILD_DIR }}
          cd ${{ env.LOCAL_BUILD_DIR }}
          rm -rf ${{ env.FIRMWARE_DIST }}
          git clone https://bgithub.xyz/istoreos/istoreos.git ${{ env.FIRMWARE_DIST }} || exit 1
          cd ${{ env.FIRMWARE_DIST }}
          git checkout ${{ env.ISTOREOS_BRANCH }} || exit 1

          # 步骤1：查看prereq.mk原始内容（确认修改前状态）
          echo "===== prereq.mk原始第7-11行 ====="
          sed -n '7,11p' "${{ env.PREREQ_FILE }}"  # 查看报错行附近内容

          # 步骤2：暴力删除pyelftools检查（直接替换整个检查块）
          echo "===== 修改prereq.mk ====="
          # 用sed删除包含"python3-pyelftools"和"u-boot: Please install"的所有行
          sed -i '/python3-pyelftools/d' "${{ env.PREREQ_FILE }}"
          sed -i '/u-boot: Please install the Python3 elftools module/d' "${{ env.PREREQ_FILE }}"

          # 步骤3：查看修改后内容（确保修改生效）
          echo "===== prereq.mk修改后第7-11行 ====="
          sed -n '7,11p' "${{ env.PREREQ_FILE }}"
          if grep -q "python3-pyelftools" "${{ env.PREREQ_FILE }}"; then
            echo "ERROR: prereq.mk修改失败！仍有pyelftools检查"
            exit 1
          fi

      - name: 4. 同步基础源+删除所有第三方依赖（QModem/argon）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 步骤1：只保留官方源，删除所有第三方源（QModem/third等）
          echo "===== 清理feeds.conf.default ====="
          # 保留默认源，删除其他所有源
          sed -i '/^src-git/qmodem/d' feeds.conf.default
          sed -i '/^src-git/third/d' feeds.conf.default
          cat feeds.conf.default  # 验证清理结果

          # 步骤2：同步仅官方源
          ./scripts/feeds update -a || exit 1
          ./scripts/feeds install -a || exit 1

          # 步骤3：删除istoreos-files（避免argon依赖）
          echo "===== 删除istoreos-files（绕开argon依赖） ====="
          if [ -d "package/istoreos-files" ]; then
            rm -rf "package/istoreos-files"
            echo "已删除istoreos-files"
          fi

          # 步骤4：确认QModem已不存在
          if [ -d "package/feeds/qmodem" ]; then
            rm -rf "package/feeds/qmodem"
            echo "已删除QModem feeds"
          fi

      - name: 5. 导入配置+禁用所有非官方包
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          cp ${{ github.workspace }}/xgp-qmodem.config .config

          # 禁用所有第三方包和主题
          sed -i 's/CONFIG_PACKAGE_luci-theme-argon=y/# &/' .config
          sed -i 's/CONFIG_PACKAGE_quectel.*=y/# &/' .config
          sed -i 's/CONFIG_PACKAGE_istoreos-files=y/# &/' .config
          sed -i 's/CONFIG_PACKAGE_luci-app-qmodem.*=y/# &/' .config

          # 启用默认主题（确保无主题依赖）
          sed -i 's/# CONFIG_PACKAGE_luci-theme-bootstrap is not set/CONFIG_PACKAGE_luci-theme-bootstrap=y/' .config

          make defconfig || exit 1

          # 验证最终配置
          echo "===== 验证关键配置 ====="
          grep -E "luci-theme-argon|luci-theme-bootstrap|istoreos-files|qmodem|quectel" .config | grep -v "#"

      - name: 6. 最终验证所有修改（再确认一次）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          echo "===== 最终验证 ====="
          # 1. prereq.mk无pyelftools检查
          echo "prereq.mk是否有pyelftools：$(grep -c "python3-pyelftools" "${{ env.PREREQ_FILE }}")"
          # 2. 无istoreos-files
          echo "istoreos-files是否存在：$(test -d package/istoreos-files && echo "是" || echo "否")"
          # 3. 无QModem
          echo "QModem是否存在：$(test -d package/feeds/qmodem && echo "是" || echo "否")"

      - name: 7. 编译（最小化配置）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          CPU_CORES=$(nproc)
          echo "使用 $CPU_CORES 核心编译（最小化配置）..."
          # 直接编译，忽略警告
          make -j$CPU_CORES V=m 2>&1 | tee build.log

          # 验证固件
          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ -d "$FIRMWARE_DIR" ] && [ -n "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "✅ 固件编译成功！路径：$FIRMWARE_DIR"
          else
            echo "❌ 编译失败，最后50行错误日志："
            grep -i "error" build.log | tail -50
            exit 1
          fi

      - name: 8. 打包产物
        run: |
          LOCAL_OUTPUT="${{ github.workspace }}/local-firmware"
          mkdir -p $LOCAL_OUTPUT
          cp -r ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/* $LOCAL_OUTPUT/
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/build.log $LOCAL_OUTPUT/
