name: 本地编译iStoreOS-XGP（精准文件修改）

on:
  workflow_dispatch:

jobs:
  local-build:
    runs-on: self-hosted
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      ISTOREOS_BRANCH: "istoreos-24.10"
      LOCAL_BUILD_DIR: "${{ github.workspace }}/build"
      # 日志中明确的关键文件路径（直接写死，不搜索）
      GLOBAL_PREREQ_FILE: "${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/include/prereq.mk"
      ISTOREOS_FILES_MK: "${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/package/istoreos-files/Makefile"
      QMODEM_FEEDS_MK: "${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/package/feeds/qmodem/qmodem/Makefile"

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 2. 安装基础依赖
        run: |
          sudo apt update -y
          sudo apt install -y build-essential python3 python3-pip swig git rsync
          sudo pip install pyelftools --upgrade

      - name: 3. 克隆源码+立即修改全局prereq.mk（日志明确路径！）
        run: |
          mkdir -p ${{ env.LOCAL_BUILD_DIR }}
          cd ${{ env.LOCAL_BUILD_DIR }}
          rm -rf ${{ env.FIRMWARE_DIST }}
          git clone https://bgithub.xyz/istoreos/istoreos.git ${{ env.FIRMWARE_DIST }} || exit 1
          cd ${{ env.FIRMWARE_DIST }}
          git checkout ${{ env.ISTOREOS_BRANCH }} || exit 1

          # 关键：修改日志中明确的 /include/prereq.mk（第9行报错）
          echo "===== 修改全局prereq.mk（日志中第9行） ====="
          if [ -f "${{ env.GLOBAL_PREREQ_FILE }}" ]; then
            # 注释掉第9行附近的pyelftools检查（直接定位行号）
            sed -i '9s/^/#/' "${{ env.GLOBAL_PREREQ_FILE }}"  # 注释第9行
            sed -i '/python3-pyelftools/d' "${{ env.GLOBAL_PREREQ_FILE }}"  # 删除pyelftools检查
            sed -i '/u-boot: Please install the Python3 elftools module/d' "${{ env.GLOBAL_PREREQ_FILE }}"
            echo "已修改全局prereq.mk："
            cat "${{ env.GLOBAL_PREREQ_FILE }}" | grep -A 5 -B 5 "prereq"  # 验证修改
          else
            echo "ERROR: 全局prereq.mk不存在！路径：${{ env.GLOBAL_PREREQ_FILE }}"
            exit 1
          fi

      - name: 4. 同步feeds+立即删除QModem feeds版本（避免冲突）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 同步feeds（包含QModem）
          sed -i '/qmodem/d' feeds.conf.default
          echo "src-git qmodem https://github.com/FUjr/QModem.git" >> feeds.conf.default
          ./scripts/feeds update -a || exit 1
          ./scripts/feeds install -a -p qmodem || exit 1

          # 立即删除feeds中的QModem（避免依赖干扰）
          echo "===== 删除feeds中的QModem，使用手动版本 ====="
          if [ -d "package/feeds/qmodem" ]; then
            rm -rf "package/feeds/qmodem"
            echo "已删除feeds QModem"
          fi

          # 手动克隆QModem到package目录（无依赖）
          git clone https://github.com/FUjr/QModem.git package/qmodem || exit 1
          # 清空手动QModem的依赖
          sed -i 's/DEPENDS:=.*/DEPENDS:=/' "package/qmodem/qmodem/Makefile"
          grep "DEPENDS" "package/qmodem/qmodem/Makefile"

      - name: 5. 强制修改istoreos-files依赖（日志明确路径）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          echo "===== 修改istoreos-files的argon依赖 ====="
          if [ -f "${{ env.ISTOREOS_FILES_MK }}" ]; then
            # 彻底删除argon依赖，替换为默认主题
            sed -i 's/luci-theme-argon/luci-theme-bootstrap/g' "${{ env.ISTOREOS_FILES_MK }}"
            echo "修改后的istoreos-files依赖："
            grep "DEPENDS" "${{ env.ISTOREOS_FILES_MK }}"
          else
            echo "ERROR: istoreos-files Makefile不存在！路径：${{ env.ISTOREOS_FILES_MK }}"
            exit 1
          fi

      - name: 6. 导入配置+最终验证修改
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          cp ${{ github.workspace }}/xgp-qmodem.config .config

          # 禁用所有无效包
          sed -i 's/CONFIG_PACKAGE_luci-theme-argon=y/# &/' .config
          sed -i 's/CONFIG_PACKAGE_quectel.*=y/# &/' .config

          make defconfig || exit 1

          # 最终验证：确保没有报错的依赖检查
          echo "===== 验证所有修改是否生效 ====="
          grep -r "python3-pyelftools" ./include ./package | grep -v ".git" || echo "pyelftools检查已清除"
          grep -r "luci-theme-argon" ./package/istoreos-files || echo "argon依赖已替换"
          grep -r "quectel_CM_5G_M" ./package/qmodem || echo "QModem无效依赖已清除"

      - name: 7. 编译（最后尝试）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          CPU_CORES=$(nproc)
          echo "使用 $CPU_CORES 核心编译..."
          make -j$CPU_CORES V=m 2>&1 | tee build.log

          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ -d "$FIRMWARE_DIR" ] && [ -n "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "固件编译成功！路径：$FIRMWARE_DIR"
          else
            echo "===== 编译失败，最后关键日志 ====="
            grep -i "error" build.log | tail -50
            exit 1
          fi

      - name: 8. 打包产物
        run: |
          LOCAL_OUTPUT="${{ github.workspace }}/local-firmware"
          mkdir -p $LOCAL_OUTPUT
          cp -r ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/* $LOCAL_OUTPUT/
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/build.log $LOCAL_OUTPUT/
