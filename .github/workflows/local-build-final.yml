name: 本地编译iStoreOS-XGP（终极暴力修复）

on:
  workflow_dispatch:

jobs:
  local-build:
    runs-on: self-hosted
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      ISTOREOS_BRANCH: "istoreos-24.10"
      LOCAL_BUILD_DIR: "${{ github.workspace }}/build"

    steps:
      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 2. 安装最基础依赖（放弃复杂环境配置）
        run: |
          sudo apt update -y
          sudo apt install -y build-essential python3 python3-pip \
            swig git rsync unzip wget  # 只装必需的，避免环境干扰
          # 安装pyelftools（不管路径，先装上）
          sudo pip install pyelftools --upgrade

      - name: 3. 克隆iStoreOS源码+直接修改u-boot检查脚本（核心！）
        run: |
          mkdir -p ${{ env.LOCAL_BUILD_DIR }}
          cd ${{ env.LOCAL_BUILD_DIR }}
          rm -rf ${{ env.FIRMWARE_DIST }}
          git clone https://bgithub.xyz/istoreos/istoreos.git ${{ env.FIRMWARE_DIST }} || exit 1
          cd ${{ env.FIRMWARE_DIST }}
          git checkout ${{ env.ISTOREOS_BRANCH }} || exit 1

          # 暴力修改u-boot的pyelftools检查：直接注释掉！
          echo "===== 绕过u-boot的pyelftools检查 ====="
          # 找到u-boot的prereq检查文件（不同版本路径可能不同，先搜索）
          UBOOT_PREREQ_FILE=$(find ./package/boot -name "prereq.mk" -o -name "Makefile" | grep -E "uboot.*(prereq|Makefile)")
          for file in $UBOOT_PREREQ_FILE; do
            # 注释掉检查pyelftools的行
            sed -i 's/Checking.*python3-pyelftools.*//g' "$file"
            sed -i 's/u-boot: Please install the Python3 elftools module//g' "$file"
            sed -i 's/import elftools//g' "$file"
            echo "已修改：$file"
          done
          # 验证修改：确保没有pyelftools检查
          grep -r "elftools" ./package/boot | grep -v ".git" || echo "u-boot检查已清除"

      - name: 4. 同步基础软件源+删除argon主题依赖
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 只同步官方源，放弃第三方源干扰
          sed -i '/third/d' feeds.conf.default  # 删除第三方源
          sed -i '/qmodem/d' feeds.conf.default  # 先删除QModem，后面手动加
          ./scripts/feeds update -a || exit 1
          ./scripts/feeds install -a || exit 1

          # 暴力修改istoreos-files的依赖：删除argon主题
          echo "===== 移除istoreos-files对argon的依赖 ====="
          ISTOREOS_FILES_MK="package/istoreos-files/Makefile"
          sed -i 's/DEPENDS:=.*luci-theme-argon.*//g' "$ISTOREOS_FILES_MK"
          sed -i 's/DEPENDS:=/DEPENDS:=luci-theme-bootstrap/g' "$ISTOREOS_FILES_MK"  # 替换为默认主题
          grep "DEPENDS" "$ISTOREOS_FILES_MK"

      - name: 5. 手动添加QModem（不通过feeds，避免依赖覆盖）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 手动克隆QModem到package目录（而非feeds）
          if [ ! -d "package/qmodem" ]; then
            git clone https://github.com/FUjr/QModem.git package/qmodem || exit 1
          fi
          # 暴力删除QModem的无效依赖
          QMODEM_MK="package/qmodem/qmodem/Makefile"
          sed -i 's/DEPENDS:=.*/DEPENDS:=/g' "$QMODEM_MK"  # 清空所有依赖
          echo "已清空QModem依赖：$QMODEM_MK"
          grep "DEPENDS" "$QMODEM_MK"

      - name: 6. 导入配置+禁用所有无效包
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          cp ${{ github.workspace }}/xgp-qmodem.config .config

          # 禁用所有可能有问题的包
          sed -i 's/CONFIG_PACKAGE_luci-app-baidupcs-web=y/# &/' .config
          sed -i 's/CONFIG_PACKAGE_quectel.*=y/# &/' .config  # 禁用所有quectel包
          sed -i 's/CONFIG_PACKAGE_luci-theme-argon=y/# &/' .config  # 禁用argon
          sed -i 's/# CONFIG_PACKAGE_luci-theme-bootstrap is not set/CONFIG_PACKAGE_luci-theme-bootstrap=y/' .config  # 启用默认主题

          make defconfig || exit 1

      - name: 7. 直接编译（放弃prereq检查）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 跳过prereq，直接编译（风险高但能绕开检查）
          CPU_CORES=$(nproc)
          make -j$CPU_CORES V=m 2>&1 | tee build.log

          # 验证固件
          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ ! -d "$FIRMWARE_DIR" ] || [ -z "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "===== 编译失败，关键错误 ====="
            grep -i "error:.*elftools\|error:.*quectel\|error:.*argon" build.log | tail -100
            exit 1
          fi
          echo "固件编译成功！"

      - name: 8. 打包产物
        run: |
          LOCAL_OUTPUT="${{ github.workspace }}/local-firmware"
          mkdir -p $LOCAL_OUTPUT
          cp -r ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/* $LOCAL_OUTPUT/
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/build.log $LOCAL_OUTPUT/
