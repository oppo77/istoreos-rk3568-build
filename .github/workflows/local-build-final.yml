name: 本地编译iStoreOS-XGP（镜像版）

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/local-build-final.yml'
      - 'xgp-qmodem.config'
      - 'files/**'

jobs:
  local-build:
    runs-on: self-hosted
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      ISTOREOS_BRANCH: "istoreos-24.10"
      LOCAL_BUILD_DIR: "${{ github.workspace }}/build"
      VENV_PATH: "${LOCAL_BUILD_DIR}/python-venv"
      # 核心：定义GitHub镜像地址
      GITHUB_MIRROR: "https://bgithub.xyz"

    steps:
      - name: 0. 配置GitHub镜像（全局替换）
        run: |
          # 1. 配置git全局镜像：将github.com替换为bgithub.xyz
          git config --global url."${{ env.GITHUB_MIRROR }}/".insteadOf "https://github.com/"
          # 2. 验证配置是否生效
          echo "当前git全局镜像配置："
          git config --global --get-regexp url.*.insteadOf

      - name: 1. 拉取仓库代码（通过镜像）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          # 可选：若仓库也在镜像站，可指定镜像地址（此处默认使用步骤0的全局配置）
          # repository: ${{ env.GITHUB_MIRROR }}/oppo77/istoreos-rk3568-build

      - name: 2. 系统依赖+Python虚拟环境配置
        run: |
          echo "===== 安装系统基础依赖 ====="
          REQUIRED_PACKAGES="build-essential flex bison g++ gawk gcc-multilib \
            gettext git libncurses5-dev libssl-dev libelf-dev python3 python3-pip \
            python3-venv rsync unzip wget zlib1g-dev quilt u-boot-tools squashfs-tools \
            meson ninja-build cmake device-tree-compiler liblz4-tool"

          for pkg in $REQUIRED_PACKAGES; do
            if ! dpkg -l | grep -q "$pkg"; then
              echo "安装缺失依赖：$pkg"
              sudo apt update -y || sudo apt update -y
              sudo apt install -y "$pkg" || {
                echo "ERROR: 安装 $pkg 失败！"
                exit 1
              }
            fi
          done

          echo "===== 验证git是否可用 ====="
          if ! command -v git &> /dev/null; then
            echo "ERROR: git 未安装成功！手动重试安装..."
            sudo apt install -y git --reinstall
            if ! command -v git &> /dev/null; then
              echo "ERROR: git 始终安装失败，请手动检查！"
              exit 1
            fi
          fi

          echo "===== 创建Python虚拟环境 ====="
          if [ -d "$VENV_PATH" ]; then
            rm -rf "$VENV_PATH"
          fi
          python3 -m venv "$VENV_PATH"
          if [ ! -f "$VENV_PATH/bin/activate" ]; then
            echo "ERROR: 虚拟环境创建失败！"
            exit 1
          fi

          echo "===== 安装Python依赖 ====="
          source "$VENV_PATH/bin/activate"
          if ! python3 -c "import elftools" &> /dev/null; then
            pip install pyelftools --upgrade
          fi
          if ! python3 -c "import elftools" &> /dev/null; then
            echo "ERROR: pyelftools安装失败！"
            exit 1
          fi
          deactivate

          echo "===== 验证核心工具 ====="
          REQUIRED_TOOLS="gcc make python3 git wget unzip mksquashfs"
          for tool in $REQUIRED_TOOLS; do
            if ! command -v $tool &> /dev/null; then
              echo "ERROR: 核心工具 $tool 未安装！"
              exit 1
            fi
          done

      - name: 3. 缓存编译资源
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/dl
            ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/feeds
          key: ${{ runner.os }}-istoreos-${{ env.ISTOREOS_BRANCH }}-${{ hashFiles('xgp-qmodem.config') }}
          restore-keys: |
            ${{ runner.os }}-istoreos-${{ env.ISTOREOS_BRANCH }}-

      - name: 4. 克隆/更新iStoreOS稳定分支（使用bgithub.xyz镜像）
        run: |
          mkdir -p ${{ env.LOCAL_BUILD_DIR }}
          cd ${{ env.LOCAL_BUILD_DIR }}

          # 克隆iStoreOS源码（直接使用镜像地址）
          if [ ! -d "${{ env.FIRMWARE_DIST }}" ]; then
            echo "从镜像克隆iStoreOS源码：${{ env.GITHUB_MIRROR }}/istoreos/istoreos.git"
            git clone "${{ env.GITHUB_MIRROR }}/istoreos/istoreos.git" ${{ env.FIRMWARE_DIST }} || {
              echo "ERROR: 镜像克隆失败！检查镜像地址是否可用：${{ env.GITHUB_MIRROR }}"
              exit 1
            }
          fi

          # 进入源码目录，设置远程仓库为镜像（确保后续git pull正常）
          cd ${{ env.FIRMWARE_DIST }}
          git remote set-url origin "${{ env.GITHUB_MIRROR }}/istoreos/istoreos.git"
          # 切换到稳定分支并拉取最新代码
          git checkout ${{ env.ISTOREOS_BRANCH }}
          git pull || {
            echo "ERROR: git pull失败，可能镜像未同步该分支！"
            exit 1
          }

          echo "当前分支：$(git branch --show-current)"
          echo "最新Commit：$(git rev-parse --short HEAD)"

      - name: 5. 同步软件源（QModem使用bgithub.xyz镜像）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}

          # 1. 替换iStoreOS默认源为国内源（中科大）
          sed -i 's#https://downloads.openwrt.org#https://mirrors.ustc.edu.cn/openwrt#g' feeds.conf.default
          sed -i 's#https://mirrors.cernet.edu.cn#https://mirrors.ustc.edu.cn#g' feeds.conf.default

          # 2. 添加/替换QModem源为bgithub.xyz镜像
          echo "使用QModem镜像源：${{ env.GITHUB_MIRROR }}/FUjr/QModem.git"
          # 先删除原有QModem源（避免重复）
          sed -i '/qmodem/d' feeds.conf.default
          # 新增镜像源
          echo "src-git qmodem ${{ env.GITHUB_MIRROR }}/FUjr/QModem.git" >> feeds.conf.default

          # 3. 同步软件源（通过镜像）
          echo "同步软件源（含QModem镜像）..."
          ./scripts/feeds update -a || {
            echo "ERROR: 同步源失败！检查镜像地址或网络..."
            exit 1
          }
          ./scripts/feeds install -a -f

      - name: 6. 导入设备配置文件
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          cp ${{ github.workspace }}/xgp-qmodem.config .config
          make defconfig

          if ! grep -q "CONFIG_TARGET_rockchip=y" .config; then
            echo "ERROR: 平台配置错误！"
            exit 1
          fi
          if ! grep -q "CONFIG_PACKAGE_luci-app-qmodem=y" .config; then
            echo "ERROR: QModem未启用！"
            exit 1
          fi

      - name: 7. 本地多核编译
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          source "$VENV_PATH/bin/activate"
          if [ "$(which python3)" != "$VENV_PATH/bin/python3" ]; then
            echo "ERROR: 虚拟环境激活失败！"
            exit 1
          fi

          CPU_CORES=$(nproc)
          echo "使用 $CPU_CORES 核心编译..."

          timeout 180m bash -c "
            make -j$CPU_CORES V=m 2>&1 | tee build.log &
            PID=\$!
            while kill -0 \$PID 2>/dev/null; do
              echo \"===== 编译中（$(date +%H:%M:%S)）=====\"
              grep -E \"Compiling|Linking|Installing\" build.log | tail -5
              sleep 600
            done
            wait \$PID
          "

          deactivate

          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ ! -d "$FIRMWARE_DIR" ] || [ -z "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            echo "ERROR: 编译失败！最后1000行日志："
            cat build.log | tail -1000
            exit 1
          fi
          echo "固件编译成功！"

      - name: 8. 打包产物
        run: |
          LOCAL_OUTPUT="${{ github.workspace }}/local-firmware"
          mkdir -p $LOCAL_OUTPUT
          REMOTE_OUTPUT="${{ env.LOCAL_BUILD_DIR }}/output"
          mkdir -p $REMOTE_OUTPUT

          FIRMWARE_DIR="${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          cp $FIRMWARE_DIR/*.sysupgrade.bin $LOCAL_OUTPUT/
          cp $FIRMWARE_DIR/*.factory.img $LOCAL_OUTPUT/ 2>/dev/null
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/.config $LOCAL_OUTPUT/final_config.config
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/build.log $LOCAL_OUTPUT/build_log.txt

          cp -r $LOCAL_OUTPUT/* $REMOTE_OUTPUT/
          echo "本地产物路径：$LOCAL_OUTPUT"
          ls -l $LOCAL_OUTPUT

      - name: 9. 上传产物到GitHub（可选，若镜像支持可替换）
        uses: actions/upload-artifact@v4
        with:
          name: istoreos-local-mirror
          path: ${{ env.LOCAL_BUILD_DIR }}/output/
          retention-days: 30
