name: 本地编译iStoreOS-XGP（最终依赖终极修复）

on:
  workflow_dispatch:

jobs:
  local-build:
    runs-on: self-hosted
    env:
      TARGET_PLATFORM: rockchip
      TARGET_SUBPLATFORM: rk35xx
      FIRMWARE_DIST: istoreos
      ISTOREOS_BRANCH: "istoreos-24.10"
      LOCAL_BUILD_DIR: "${{ github.workspace }}/build"
      VENV_PATH: "${LOCAL_BUILD_DIR}/python-venv"
      GITHUB_MIRROR: "https://bgithub.xyz"

    steps:
      - name: 0. 配置GitHub镜像
        run: |
          git config --global url."${{ env.GITHUB_MIRROR }}/".insteadOf "https://github.com/"

      - name: 1. 拉取仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 2. 安装系统依赖（确保swig和Python基础库）
        run: |
          echo "===== 安装核心依赖 ====="
          sudo apt update -y
          sudo apt install -y \
            build-essential python3 python3-pip python3-venv \
            python3-dev python3-setuptools swig  # 确保这些包存在
          # 验证swig和Python
          command -v swig || { echo "ERROR: swig缺失"; exit 1; }
          command -v python3 || { echo "ERROR: python3缺失"; exit 1; }

      - name: 3. 强制激活虚拟环境+强制制安装pyelftools（关键修复）
        run: |
          echo "===== 强制配置虚拟环境 ====="
          # 彻底清理清理旧环境，确保干净
          rm -rf "${{ env.VENV_PATH }}"
          mkdir -p "$(dirname ${{ env.VENV_PATH }})"
          /usr/bin/python3 -m venv "${{ env.VENV_PATH }}" || exit 1

          # 激活并强制安装pyelftools（指定显式指定虚拟环境pip）
          source "${{ env.VENV_PATH }}/bin/activate" || exit 1
          echo "当前Python路径：$(which python3)"  # 必须显示为虚拟环境内的路径
          echo "当前pip路径：$(which pip)"
          pip install pyelftools --upgrade --force-reinstall || {
            echo "ERROR: pyelftools安装失败，手动安装..."
            # 备选方案：系统级安装（可能污染环境，但确保可用）
            sudo pip install pyelftools --upgrade
          }

          # 终极验证：确保能导入
          if ! python3 -c "import elftools" &> /dev/null; then
            echo "ERROR: 即使重装，pyelftools仍无法导入！"
            # 输出调试信息
            pip list | grep elftools
            python3 -V
            exit 1
          fi
          deactivate

      - name: 4. 克隆iStoreOS源码
        run: |
          mkdir -p ${{ env.LOCAL_BUILD_DIR }}
          cd ${{ env.LOCAL_BUILD_DIR }}
          rm -rf ${{ env.FIRMWARE_DIST }}
          git clone "${{ env.GITHUB_MIRROR }}/istoreos/istoreos.git" ${{ env.FIRMWARE_DIST }} || exit 1
          cd ${{ env.FIRMWARE_DIST }}
          git checkout ${{ env.ISTOREOS_BRANCH }} || exit 1

      - name: 5. 同步软件源（移除无效依赖）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 替换国内源
          sed -i 's#https://downloads.openwrt.org#https://mirrors.ustc.edu.cn/openwrt#g' feeds.conf.default

          # 1. 彻底移除baidupcs-web相关（避免依赖错误）
          sed -i '/third/d' feeds.conf.default  # 移除包含baidupcs-web的源
          rm -rf package/feeds/third/luci-app-baidupcs-web  # 清理残留

          # 2. 修复QModem源依赖
          sed -i '/qmodem/d' feeds.conf.default
          echo "src-git qmodem https://github.com/FUjr/QModem.git" >> feeds.conf.default
          ./scripts/feeds update -a -f || exit 1
          ./scripts/feeds install -a -f || exit 1

          # 3. 手动修正QModem的Makefile依赖（关键！）
          QMODEM_MAKEFILE="package/feeds/qmodem/qmodem/Makefile"
          if [ -f "$QMODEM_MAKEFILE" ]; then
            echo "===== 修正QModem依赖为实际存在的包 ====="
            # 替换不存在的quectel-CM-5G/quectel-cm为源中实际存在的包（如quectel_CM_5G_M）
            sed -i 's/quectel-CM-5G/quectel_CM_5G_M/g' "$QMODEM_MAKEFILE"
            sed -i 's/quectel-cm/quectel_CM_5G_M/g' "$QMODEM_MAKEFILE"
            # 验证修改
            grep -E "DEPENDS" "$QMODEM_MAKEFILE"
          else
            echo "ERROR: QModem Makefile不存在！"
            exit 1
          fi

      - name: 6. 导入配置并禁用无效包
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          cp ${{ github.workspace }}/xgp-qmodem.config .config

          # 禁用baidupcs-web（彻底避免）
          sed -i 's/CONFIG_PACKAGE_luci-app-baidupcs-web=y/# CONFIG_PACKAGE_luci-app-baidupcs-web is not set/' .config
          # 确保QModem依赖正确
          sed -i 's/quectel-CM-5G/quectel_CM_5G_M/g' .config
          sed -i 's/quectel-cm/quectel_CM_5G_M/g' .config

          make defconfig || exit 1

      - name: 7. 预检查依赖（确保pyelftools可用）
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          # 必须激活虚拟环境，否则u-boot找不到pyelftools
          source "${{ env.VENV_PATH }}/bin/activate" || exit 1
          echo "编译使用的Python：$(which python3)"  # 确认是虚拟环境内的

          # 运行prereq检查，输出详细日志
          make prereq V=s 2>&1 | tee prereq.log || {
            echo "===== 依赖检查失败日志 ====="
            grep -i "elftools\|quectel\|baidupcs" prereq.log
            exit 1
          }
          deactivate

      - name: 8. 编译
        run: |
          cd ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}
          source "${{ env.VENV_PATH }}/bin/activate" || exit 1

          CPU_CORES=$(nproc)
          make -j$CPU_CORES V=m 2>&1 | tee build.log
          deactivate

          FIRMWARE_DIR="bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM"
          if [ ! -d "$FIRMWARE_DIR" ] || [ -z "$(ls $FIRMWARE_DIR/*.sysupgrade.bin 2>/dev/null)" ]; then
            cat build.log | tail -1000
            exit 1
          fi

      - name: 9. 打包产物
        run: |
          LOCAL_OUTPUT="${{ github.workspace }}/local-firmware"
          mkdir -p $LOCAL_OUTPUT
          cp -r ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/bin/targets/$TARGET_PLATFORM/$TARGET_SUBPLATFORM/* $LOCAL_OUTPUT/
          cp ${{ env.LOCAL_BUILD_DIR }}/${{ env.FIRMWARE_DIST }}/*.log $LOCAL_OUTPUT/
